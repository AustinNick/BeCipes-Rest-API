generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---- User Configuration ----
model users {
  id         Int       @id @default(autoincrement())
  id_role    Int
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  password   String    @db.VarChar(100)
  email      String    @unique
  photo      String?   @unique
  token      String?   @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @default(now())

  role role @relation(fields: [id_role], references: [id])

  teknik         teknik[]
  artikel        artikel[]
  bahan          bahan[]
  jenis_kategori jenis_kategori[]
  kategori       kategori[]
  resep          resep[]
  step           step[]
  favorite       favorite[]
  kategori_resep kategori_resep[]

  @@map("users")
}

model role {
  id        Int       @id @default(autoincrement())
  role_name String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  users users[]

  @@map("role")
}

model favorite {
  id        Int       @id @default(autoincrement())
  id_user   Int
  id_resep  Int
  createdBy Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  resep resep @relation(fields: [id_resep], references: [id])
  users users @relation(fields: [createdBy], references: [id])

  @@map("favorite")
}

// ---- Kategori Configuration ----
model kategori {
  id            Int       @id @default(autoincrement())
  nama_kategori String    @unique @db.VarChar(100)
  gambar        String?   @db.VarChar(100)
  id_jenis      Int
  createdBy     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @default(now())

  jenis_kategori jenis_kategori @relation(fields: [id_jenis], references: [id])
  user           users          @relation(fields: [createdBy], references: [id])

  artikel        artikel[]
  teknik         teknik[]
  resep          resep[]
  kategori_resep kategori_resep[]

  @@map("kategori")
}

model jenis_kategori {
  id         Int       @id @default(autoincrement())
  nama_jenis String    @unique @db.VarChar(100)
  createdBy  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @default(now())

  user users @relation(fields: [createdBy], references: [id])

  kategori kategori[]

  @@map("jenis_kategori")
}

model kategori_resep {
  id          Int       @id @default(autoincrement())
  id_kategori Int
  id_resep    Int
  nama_jenis  String    @unique @db.VarChar(100)
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())

  user     users    @relation(fields: [createdBy], references: [id])
  kategori kategori @relation(fields: [id_kategori], references: [id])
  resep    resep    @relation(fields: [id_resep], references: [id])

  @@map("kategori_resep")
}

// ---- Resep & Bahan Configuration ----
model bahan {
  id         Int       @id @default(autoincrement())
  nama_bahan String    @db.VarChar(100)
  deskripsi  String    @db.VarChar(255)
  gambar     String    @db.VarChar(100)
  gizi       String    @db.VarChar(100)
  createdBy  Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @default(now())

  user users @relation(fields: [createdBy], references: [id])

  @@map("bahan")
}

model resep {
  id             Int       @id @default(autoincrement())
  nama_resep     String    @db.VarChar(100)
  deskripsi      String    @db.VarChar(255)
  gambar         String    @db.VarChar(100)
  bahan          String    @db.VarChar(255)
  informasi_gizi String    @db.VarChar(255)
  id_kategori    Int
  createdBy      Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @default(now())

  kategori kategori @relation(fields: [id_kategori], references: [id])
  user     users    @relation(fields: [createdBy], references: [id])

  step           step[]
  favorite       favorite[]
  kategori_resep kategori_resep[]

  @@map("resep")
}

model step {
  id        Int       @id @default(autoincrement())
  id_resep  Int
  step_no   String    @db.VarChar(2)
  step_desc String    @db.VarChar(255)
  waktu     String    @db.VarChar(100)
  createdBy Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  resep resep @relation(fields: [id_resep], references: [id])
  user  users @relation(fields: [createdBy], references: [id])

  @@map("step")
}

// ---- Information Configuration ----
model artikel {
  id          Int       @id @default(autoincrement())
  headline    String    @db.VarChar(100)
  gambar      String    @db.VarChar(100)
  isi         String    @db.VarChar(100)
  penulis     String    @db.VarChar(100)
  id_kategori Int
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())

  kategori kategori @relation(fields: [id_kategori], references: [id])
  user     users    @relation(fields: [createdBy], references: [id])

  @@map("artikel")
}

model teknik {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(100)
  description String    @db.VarChar(100)
  cover       String    @db.VarChar(100)
  url         String    @db.VarChar(100)
  sumber      String    @db.VarChar(100)
  id_kategori Int
  createdBy   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())

  kategori kategori @relation(fields: [id_kategori], references: [id])
  user     users    @relation(fields: [createdBy], references: [id])

  @@map("teknik")
}
